--- js/entity_browser.entity_reference.js
+++ js/entity_browser.entity_reference.js
@@ -72,13 +96,31 @@
    *   Object with detailed information about the sort event.
    */
   Drupal.entityBrowserEntityReference.entitiesReordered = function (event, ui) {
-    var items = $(this).find('.item-container');
+    Drupal.entityBrowserEntityReference.updateTargetId($(this));
+  };
+
+  /**
+   * Updates the 'target_id' element.
+   *
+   * @param {object} $currentItems
+   *   Object with '.entities-list.sortable' element.
+   */
+  Drupal.entityBrowserEntityReference.updateTargetId = function ($currentItems) {
+    var items = $currentItems.find('.item-container');
     var ids = [];
     for (var i = 0; i < items.length; i++) {
       ids[i] = $(items[i]).attr('data-entity-id');
+      // If using weight field, update it.
+      $(items[i]).find('input[name*="[_weight]"]').val(i);
     }
+    var $target_id_element = $currentItems.parent().find('input[type*=hidden][name*="[target_id]"]');
+    $target_id_element.val(ids.join(' '));
 
-    $(this).parent().parent().find('input[type*=hidden][name*="[target_id]"]').val(ids.join(' '));
-  };
+    // Trigger ajax submission to restore entity browser form element.
+    var cardinality = parseInt($target_id_element.attr('data-cardinality'));
+    if (ids.length < cardinality && $target_id_element.attr('data-entity-browser-visible') === "0") {
+      $target_id_element.trigger('entity_browser_value_updated');
+    }
+  }
 
 }(jQuery, Drupal));
