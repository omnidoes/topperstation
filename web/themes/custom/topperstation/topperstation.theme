<?php

/**
 * @file
 * Topperstation starter .theme file.
 *
 * Contains preprocessing, processing, and anything else you might need to do.
 */

use Drupal\node\Entity\Node;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Form\FormStateInterface;

/**
 * Override or insert variables into the html template.
 *
 * @param array $variables
 *   An array of variables to pass to the theme template.
 * @param string $hook
 *   The name of the template being rendered. This is usually "html," but can
 *   also be "maintenance_page" since topperstation_preprocess_maintenance_page
 *   calls this function to have consistent variables.
 */
function topperstation_preprocess_html(array &$variables, $hook) {
  // Return early so the maintenance page does not call any code we write below.
  if ($hook != 'html') {
    return;
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function topperstation_preprocess_brightcove_video(array &$variables, $hook) {
  $brightcoveVideo = $variables['elements']['#brightcove_video'];

  $variables['elements']['url'] = $brightcoveVideo->url();
  $variables['elements']['id'] = $brightcoveVideo->id();
  $variables['status'] = $brightcoveVideo->get('status')->getValue()[0]['value'];

  if ($variables['elements']['#view_mode'] == 'default') {

    if (!$brightcoveVideo->get('related_link')->isEmpty()) {
      $url = $brightcoveVideo->get('related_link')->getValue()[0]['uri'];
      $title = $brightcoveVideo->get('related_link')->getValue()[0]['title'];

      if ($url && $title) {
        // Create a link with a target attribute.
        $link = [
          '#type' => 'link',
          '#title' => $title,
          '#url' => Url::fromUri($url),
          '#attributes' => [
            'target' => '_blank',
          ],
        ];

        $renderer = \Drupal::service('renderer');
        $variables['overlay_content'] = $renderer->render($link);
      }
    }

    /* $thumbnail = $brightcoveVideo->get('thumbnail')[0];

    if (isset($thumbnail)) {
    $fid = $thumbnail->get('target_id')->getValue();
    $file = \Drupal\file\Entity\File::load($fid);
    $imageUri = $file->getFileUri();
    $imageType = $file->getMimeType();
    $imagePathStyle = ImageStyle::load('video_poster_16_9_micro');
    $imagePath = imagePathStyle->buildUrl($imageUri);

    $base64Image = base64_encode(file_get_contents($imagePath));
    $base64Data = "data:$imageType;base64,$base64Image";

    $variables['bgImage'] = $imagePath;
    $variables['bgImageBase64'] = $base64Data;
    } */
  }

  if ($variables['elements']['#view_mode'] == 'teaser') {

  }
}

/**
 * Implements hook_preprocess_hook().
 */
function topperstation_preprocess_node(array &$variables, $hook) {
  $node = $variables['node'];

  // Add an unpublished variable.
  $variables['unpublished'] = FALSE;
  if ($variables['node']->isPublished() != TRUE) {
    $variables['unpublished'] = TRUE;
  }

  switch ($node->getType()) {
    case 'show':
      if ($node->hasField('field_teaser_image')) {
        if (!$node->get('field_teaser_image')->isEmpty()) {
          $path = $node->field_teaser_image->entity->getFileUri();
          $variables['bgImage'] = ImageStyle::load('show_teaser_image')->buildUrl($path);
        }
      }

      if ($variables['view_mode'] == 'teaser') {
        $collections = $node->get('field_show_collections')->referencedEntities();
        $totalShows = 0;

        foreach ($collections as $collection) {
          $refVideos = $collection->field_collection_videos->referencedEntities();
          foreach ($refVideos as $video) {
            $status = $video->get('status')->getValue()[0]['value'];
            $totalShows = $status == 1 ? $totalShows + 1 : $totalShows;
          }
        }

        $variables['videos_total'] = $totalShows;
      }
      break;

    default:
      // code...
      break;
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function topperstation_preprocess_block(array &$variables, $hook) {
  $bundleType = '';

  if (isset($variables['elements']['content']['#block_content'])) {
    $bundleType = $variables['elements']['content']['#block_content']->bundle();
    $variables['bundle'] = $bundleType;
  }

  switch ($bundleType) {
    case 'video_list':
      // How many values, summing videos and the show endcap, should display?
      $totalValueLimit = 4;

      $fieldShowEndcap = &$variables['content']['field_show_endcap'];
      $fieldVideos = &$variables['content']['field_videos'];

      $showsValueCount = isset($fieldShowEndcap['#items']) ? $fieldShowEndcap['#items']->count() : 0;
      $videosValueCount = isset($fieldVideos['#items']) ? $fieldVideos['#items']->count() : 0;

      $videosValueLimit = $totalValueLimit - $showsValueCount;
      $videosToRemove = $videosValueCount - $videosValueLimit;

      if ($videosValueCount > $videosValueLimit) {
        for ($i = $videosValueCount; $i >= $videosValueLimit; $i--) {
          unset($fieldVideos[$i]);
        }

        $user = \Drupal::currentUser();
        if ($user->hasPermission('create video_list block content')) {
          $messageQuantity = $videosToRemove . ' ' . \Drupal::translation()->formatPlural($videosToRemove, 'video is', 'videos are');
          \Drupal::messenger()->addWarning($messageQuantity . ' being hidden in the <em>' . $variables['label'] . '</em> video list due to a ' . $totalValueLimit . ' item display limit.');
        }
      }

      break;

    default:
      // code...
      break;
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function topperstation_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {

  // Create a page suggestion per content type.
  if ($hook === 'page') {
    // NOTE: once https://www.drupal.org/node/2730631 is committed to D8, we can
    // simplify and go back to:
    // $node = \Drupal::routeMatch()->getParameter('node')
    // Currently the node revision routes do not convert the node parameter to
    // a full object, hence we require this workaround to ensure we start
    // with a scalar in both cases.
    $node_id = \Drupal::routeMatch()->getRawParameter('node');
    if ($node_id && ($node = Node::load($node_id))) {
      $content_type = $node->bundle();
      $suggestions[] = 'page__' . $content_type;
    }
  }

  if ($hook === 'block') {
    // Block suggestions for custom block bundles.
    if (isset($variables['elements']['content']['#block_content'])) {
      array_splice(
        $suggestions,
        1,
        0,
        'block__bundle__' . $variables['elements']['content']['#block_content']->bundle()
      );
    }
  }

}

/**
 * Implements template_preprocess_menu_local_task().
 */
function topperstation_preprocess_menu_local_task(array &$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'admin-tabs__link';
}

/**
 * Implements hook_preprocess_menu().
 */
function topperstation_preprocess_menu(&$vars) {

  if (isset($vars['menu_name'])) {

    if ($vars['menu_name'] === 'mobile-tab-menu') {

      foreach ($vars['items'] as &$item) {
        switch ($item['url']->toString()) {
          case '/shows':
            $item['icon'] = 'television';
            break;

          case '/watch':
            $item['icon'] = 'eye';
            break;

          case '/schedule':
            $item['icon'] = 'calendar';
            break;

          default:
            $item['icon'] = 'default';
            break;
        }
      }

    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for views exposed forms.
 */
function topperstation_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state, $form_id) {

  switch ($form['#id']) {
    case 'views-exposed-form-show-videos-block-videos-gallery':
      $form['seasons']['#options']['All'] = t('All Seasons');
      $form['keywords']['#placeholder'] = 'Search…';
      break;

    default:
      // code...
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for views exposed forms.
 */
function topperstation_form_search_block_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['keys']['#attributes'])) {
    $form['keys']['#attributes']['placeholder'] = 'Search…';
  }
}
